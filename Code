# Import TKinter
import tkinter
# imports everything (all classes, functions, constants, etc.)
from tkinter import *
# Using pillow, import ImageTk/Image to display images
from PIL import ImageTk, Image
# Import the random function for the question generator
import random

# Make an instructions window
class InstructionsWindow:
    # Initialise the instructions window
    def __init__(self):
        # Create the first window
        self.window1 = Tk()
        # Set title of the fourth window
        self.window1.title("Instructions Page")
        # Change colour of window 4
        self.window1.configure(background="pink")
        # Set size of fourth window
        self.window1.geometry('800x250')

        # The instructions for the game are stored in the 'instructions' -
        # variable 
        instructions = [
            "Following are the instructions for this game:",
            "1: Press 'OK' once you have read all instructions",
            "2: Input your username + level when asked and press 'start game'",
            "3: Input the answers in the entry box and press 'Enter",
            "4: You can restart the game by clicking the restart button",
            "5: Press the 'Finish' button at the top to stop the game anytime"
        ]

        # Display the instructions stored in the 'instructions' variable
        for text in instructions:
            label = tkinter.Label(self.window1, text=text,
                                  font=("Arial Bold", 10))
            label.pack(anchor='w', pady=5)

        # Create an OK button that makes user go to next window
        ok_button = tkinter.Button(self.window1, text="OK", bg='purple1',
                                  height=1,
        font=("Arial Bold", 20), width=3, command=self.open_selection_window)
        ok_button.pack(pady=10)

        # Start the event loop for window 1
        self.window1.mainloop()

    # Destroy window 1 and open the selection window
    def open_selection_window(self):
        self.window1.destroy()
        SelectionWindow()

# Make a class that make the selection window 
class SelectionWindow:
    # Initialise the selection window
    def __init__(self):
        # Create a second window
        self.window2 = Tk()
        # Set title of the second window
        self.window2.title("Selection Page")
        # Change colour of window 2
        self.window2.configure(background="pink")
        # Set size of second window
        self.window2.geometry('400x350')

        # Display a label that asks the user for their username
        username_label = Label(self.window2, text="Pick your username",
                         font=("Arial Bold", 10))
        username_label.grid(column=1, row=0)

        # Display a label that asks the user for difficulty level
        level_label = Label(self.window2, text="Pick your level",
                      font=("Arial Bold", 10))
        level_label.grid(column=1, row=2)

        # Create an entry box for the username
        self.username_entry = Entry(self.window2, width=10)
        self.username_entry.grid(column=1, row=1)

        # Create an entry box for the level of difficulty
        self.level_entry = Entry(self.window2, width=10)
        self.level_entry.grid(column=1, row=3)

        # Display the word 'Beginner' to show the user an option for the
        # difficulty levels
        beginner_label = Label(self.window2, text="Beginner",
                         font=("Arial Bold", 10))
        beginner_label.grid(column=0, row=4)

        # Display the word 'Intermediate' to show the user an option for the -
        # difficulty levels
        intermediate_label = Label(self.window2, text="Intermediate",
                             font=("Arial Bold", 10))
        intermediate_label.grid(column=1, row=4)

        # Display the word 'Hard' to show the user an option for the -
        # difficulty levels
        hard_label = Label(self.window2, text="Hard", font=("Arial Bold", 10))
        hard_label.grid(column=2, row=4)

        # Load, resize, and display an image that represents 'Beginnner'
        beginner_image = Image.open("jerry 1.png")
        resized_1 = beginner_image.resize((100, 120))
        image_1 = ImageTk.PhotoImage(resized_1)
        image1_label = Label(self.window2, image=image_1)
        image1_label.grid(column=0, row=5)

        # Load, resize, and display an image that represents 'intermediate'
        intermediate_image = Image.open("jerry 2.png")
        resized_2 = intermediate_image.resize((100, 120))
        image_2 = ImageTk.PhotoImage(resized_2)
        image2_label = Label(self.window2, image=image_2)
        image2_label.grid(column=1, row=5)

        # Load, resize, and display an image that represents 'hard'
        hard_image = Image.open("jerry 3.png")
        resized_3 = hard_image.resize((100, 120))
        image_3 = ImageTk.PhotoImage(resized_3)
        image3_label = Label(self.window2, image=image_3)
        image3_label.grid(column=2, row=5)

        # Create and display the 'Start Game' button
        start_button = Button(self.window2, text="Start Game", bg="purple1",
        height=1,
        font=("Arial Bold", 20), width=9, command=self.start_game)
        start_button.grid(column=1, row=6)

        # Start the event loop for window 2
        self.window2.mainloop()

    # Define what happens when the user clicks the 'start' button
    def start_game(self):
        # If username is not entered, a message is displayed
        if self.username_entry.get() == "":
            no_username = tkinter.Label(self.window2,
            text="Please enter a username", fg="red")
            no_username.grid(column=1, row=7)
        # If level is not valid, a message is displayed
        elif self.level_entry.get().lower() not in ["beginner", "intermediate",
                                                    "hard"]:
            invalid_level = tkinter.Label(self.window2,
                                          text="Please pick a valid level",
                                          fg="red")
            invalid_level.grid(column=1, row=7)
        # Otherwise: 
        else:
            # Save the user's username before destroying window
            self.selected_username = self.username_entry.get()
            # Save the user's level entry before destrying window
            self.selected_level = self.level_entry.get().lower()

            # Save the user's username and level in a txt file
            with open("User_entries.txt", "a") as file:
                file.write(f"Username: {self.selected_username}\n")
                file.write(f"Level: {self.selected_level}\n")

            # Destroy the selection window
            self.window2.destroy()
            # Open the game window and pass on the variables needed to the window
            GameWindow(self.selected_username, self.selected_level)

# Make the game window
class GameWindow:
    # Initialise the game window and 
    def __init__(self, selected_username, selected_level):
        # Assign the parameters to the instance variables
        self.selected_username = selected_username
        self.selected_level = selected_level
        # set default values for different variables
        self.score = 0
        self.question_count = 0
        self.max_questions = 10

        # Create a third window
        self.window3 = Tk()
        # Set title of third window
        self.window3.title("Game Started")
        # Change colour of window 3
        self.window3.configure(background="pink")
        # Set size of third window
        self.window3.geometry('230x150')

        # Create the first question
        self.create_question()

        # Creates a label to display the question
        self.question_label = tkinter.Label(self.window3, text="")
        self.question_label.grid(column=1, row=1)

        # Creates an entry box to input answers
        self.answer_input = tkinter.Entry(self.window3)
        self.answer_input.grid(column=1, row=2)
        
        # Creates a button to submit answer which checks the user's answer
        self.enter_button = tkinter.Button(self.window3, text="Enter",
                                           bg='purple1',
        command=self.examine_answer)
        self.enter_button.grid(column=1, row=3)

        # Creates a label to display the user's score
        self.score_label = tkinter.Label(self.window3,
                                         text=f"Score: {self.score}")
        self.score_label.grid(column=1, row=0)

        # Creates a button to end the game and display the end game window
        self.finish_button = tkinter.Button(self.window3,
                                            text="Finish", bg='purple1',
                                            command=self.quit_game)
        self.finish_button.grid(column=2, row=0)

        # Creates a button to restart the game
        self.restart_button = tkinter.Button(self.window3, text="Restart",
                                             bg='purple1',
                                             command=self.restart_game)
        self.restart_button.grid(column=0, row=0)

        # Displays the next question
        self.new_question_label()

        # starts event loop for window 3
        self.window3.mainloop()

    # Define  a method to create questions
    def create_question(self):
        # If selected level is beginner then the question are easy
        if self.selected_level == "beginner":
            self.num1 = random.randint(10, 20)
            self.num2 = random.randint(1, 10)
        # If selected level is intermediate then the question are intermediate
        elif self.selected_level == "intermediate":
            self.num1 = random.randint(50, 100)
            self.num2 = random.randint(1, 50)
        # If selected level is hard then the question are hard
        elif self.selected_level == "hard":
            self.num1 = random.randint(100, 500)
            self.num2 = random.randint(1, 100)

        # Wether the question addition, subtraction or division
        self.sign = random.choice(['+', '-', '*'])
        # If the sign is "+" then add the two numbers
        if self.sign == '+':
            self.answer = self.num1 + self.num2
        # If the sign is "-" then subtract the two numbers
        elif self.sign == '-':
            self.answer = self.num1 - self.num2
        # If the sign is "*" then multiply the two numbers
        elif self.sign == '*':
            self.answer = self.num1 * self.num2

    # Define the function that will be used to display the next question -
    # by setting out the structure of the question 
    def new_question_label(self):
        self.question_label.config(text=f"Q{self.question_count + 1}/10: {self.num1} {self.sign} {self.num2} = ")

    # Define the function that checks the answers
    def examine_answer(self):
        # Check answer for wether its correct or incorrect
        try:
            user_input = int(self.answer_input.get())

            # Save the user's answer inputs to the txt file
            with open("User_entries.txt", "a") as file:
                file.write(f"Question {self.question_count + 1}: {self.num1} {self.sign} {self.num2} = {user_input} (Correct Answer: {self.answer})\n")
            
            # If answer is correct a message is shown and score increases by 1
            if user_input == self.answer:
                self.score += 1
                correct_answer = tkinter.Label(self.window3,
                                               text="   Correct answer!!! :)   ", fg='green')
                correct_answer.grid(column=1, row=4)
            # If answer is incorrect a message is shown and score stays the same
            else:
                wrong_answer = tkinter.Label(self.window3,
                                             text="     Wrong answer :(     ", fg='red')
                wrong_answer.grid(column=1, row=4)

            # Display score
            self.score_label.config(text=f"Score: {self.score}")

            # Delete the entry inside the entry box
            self.answer_input.delete(0, tkinter.END)

            # Increase the question number by one
            self.question_count += 1

            # If the question number is less than the max number of questions -
            # then display a new question
            if self.question_count < self.max_questions:
                self.create_question()
                self.new_question_label()
            # Else if max question limit has been reached then quit the game
            else:
                self.quit_game()

        # If there is a value error then display a message to the user
        except ValueError:
            invalid_answer = tkinter.Label(self.window3, text="  Enter a valid number  ", fg="red")
            invalid_answer.grid(column=1, row=4)

    # Define the quit game function
    def quit_game(self):
        # Destroy window 3
        self.window3.destroy()
        # Open the game over window
        GameOverWindow(self.selected_username, self.score, self.max_questions)

    # Define the restart game function
    def restart_game(self):
        # Set score to 0
        self.score = 0
        # Set question number to 0
        self.question_count = 0
        # Display the score (0)
        self.score_label.config(text=f"Score: {self.score}")
        # Delete the entry inside the entry box
        self.answer_input.delete(0, tkinter.END)
        # Create a new question
        self.create_question()
        # Display the new question
        self.new_question_label()
        # Display a message that the game has restarted
        game_restarted = tkinter.Label(self.window3, text="The game has restarted")
        game_restarted.grid(column=1, row=4)

# Make the game over window
class GameOverWindow:
    # Initialise window and set perimeters
    def __init__(self, selected_username, score, max_questions):
        # Assign the parameters to the instance variables
        self.selected_username = selected_username
        self.score = score
        self.max_questions = max_questions

        # Create fourth window
        window4 = tkinter.Tk()
        # Set title of fourth window
        window4.title("Game Over")
        # Change colour of window 4
        window4.configure(background="pink")
        # Set size of fourth window
        window4.geometry('500x300')

        # Dipslays a label that displays the user's final score
        final_score = tkinter.Label(window4, text=f"Your final score is: {self.score}", font=("Arial Bold", 10))
        final_score.pack(pady=10)

        # Save final score to txt file
        with open("User_entries.txt", "a") as file:
            file.write(f"Final Score: {self.score}\n")
        
        # Loads, displays, and resizes the thumbs up image
        goodJob_image = Image.open("Good job.png")
        resized_4 = goodJob_image.resize((200, 240))
        image_4 = ImageTk.PhotoImage(resized_4)
        image4_label = tkinter.Label(window4, image=image_4)
        image4_label.pack(pady=10)

        # Starts the event loop for window 4
        window4.mainloop()

# Run the game
if __name__ == "__main__":
    InstructionsWindow()
